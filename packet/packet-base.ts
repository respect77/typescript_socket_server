// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PacketCode, unionToPacketCode, unionListToPacketCode } from '../packet/packet-code.js';


export class PacketBase {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PacketBase {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPacketBase(bb:flatbuffers.ByteBuffer, obj?:PacketBase):PacketBase {
  return (obj || new PacketBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPacketBase(bb:flatbuffers.ByteBuffer, obj?:PacketBase):PacketBase {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PacketBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bodyType():PacketCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : PacketCode.NONE;
}

body<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startPacketBase(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBodyType(builder:flatbuffers.Builder, bodyType:PacketCode) {
  builder.addFieldInt8(0, bodyType, PacketCode.NONE);
}

static addBody(builder:flatbuffers.Builder, bodyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, bodyOffset, 0);
}

static endPacketBase(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPacketBaseBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedPacketBaseBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createPacketBase(builder:flatbuffers.Builder, bodyType:PacketCode, bodyOffset:flatbuffers.Offset):flatbuffers.Offset {
  PacketBase.startPacketBase(builder);
  PacketBase.addBodyType(builder, bodyType);
  PacketBase.addBody(builder, bodyOffset);
  return PacketBase.endPacketBase(builder);
}
}
